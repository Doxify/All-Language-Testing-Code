/*
4
* @Author - Jeremy Trifilo (Digistr).
5
*/
6

7
public class ValueFormat
8
{
9
	private static final char[] PREFIXS = {'K', 'M', 'B', 'T'};
10

11
	public static final byte COMMAS = 0x1;
12
	public static final byte THOUSANDS = 0x40;
13
	public static final short MILLIONS = 0x80;
14
	public static final short BILLIONS = 0xC0;
15
	public static final short TRILLIONS = 0x100;
16

17
	public static final int PRECISION(int precision)
18
	{
19
		return precision << 2;
20
	}
21

22
	public static final int PREFIX(int prefix)
23
	{
24
		return prefix << 6;
25
	}
26

27
	public static String toString(int settings)
28
	{
29
		StringBuilder sb = new StringBuilder();
30
		sb.append("Prefix: ");
31
		sb.append(settings >> 6 > PREFIXS.length ? PREFIXS.length : settings >> 6);
32
		sb.append(", Precision: ");
33
		sb.append((settings >> 2) & 0xF);
34
		sb.append(", Commas: ");
35
		sb.append((settings & COMMAS) == COMMAS);
36
		return sb.toString();
37
	}
38

39
	public static String format(long value, int settings)
40
	{
41
		StringBuilder sb = new StringBuilder(32);
42
		sb.append(value);
43
		char[] data = sb.toString().toCharArray();
44
		boolean commas = (settings & COMMAS) == COMMAS;
45
		int precision = 0;
46
		int prefix = 0;
47
		if (settings >= 0x40)
48
		{
49
			prefix = settings >> 6;
50
			if (prefix > PREFIXS.length)
51
				prefix = PREFIXS.length;
52
		}
53
		if (settings > COMMAS)
54
			precision = (settings >> 2) & 0xF;
55
		sb.setLength(0);
56
		int negative = 0;
57
		if (data[0] == '-')
58
		{
59
			negative = 1;
60
		}
61
		int length = data.length - negative;
62
		if (prefix * 3 >= length)
63
		{
64
			prefix = (int)(length * 0.334);
65
			if (prefix * 3 == length && precision == 0)
66
			{
67
				--prefix;	
68
			}
69
		}
70
		int end = length - (prefix * 3);
71
		int start = (length % 3);
72
		if (start == 0)
73
			start = 3;
74
		start += negative;
75
		if (end > 0 && negative == 1)
76
			sb.append('-');
77
		int max = end + negative;
78
		for (int i = negative; i < max; i++)
79
		{
80
			if (i == start && i + 2 < max && commas)
81
			{
82
				start += 3;
83
				sb.append(',');
84
			}
85
			sb.append(data[i]);
86
		}
87
		if (prefix > 0)
88
		{
89
			if (end == 0)
90
			{
91
				if (negative == 1 && precision > 0)
92
					sb.append('-');
93
				sb.append('0');
94
			}
95
			max = precision + end + negative;
96
			if (max > data.length)
97
				max = data.length;
98
			end += negative;
99
			while (max > end)
100
			{
101
				if (data[max - 1] == '0')
102
				{
103
					--max;
104
					continue;
105
				}
106
				break;
107
			}
108
			if ((max - end) != 0)
109
				sb.append('.');
110
			for (int i = end; i < max; i++)
111
			{
112
				sb.append(data[i]);
113
			}
114
			sb.append(PREFIXS[prefix - 1]);
115
		}
116
		return sb.toString();
117
	}
118
}